From f1178247ae5f86c17bfd3cde6491528792884324 Mon Sep 17 00:00:00 2001
From: openhands <openhands@all-hands.dev>
Date: Mon, 25 Aug 2025 05:12:39 +0000
Subject: [PATCH] Docs/Web-only alignment: mark legacy desktop/AppImage;
 HTTP-at-root + SSE clarified; consolidate MockOverlayWindow to UI version;
 prep WS overlays for tests\n\n- SPECIFICATION.md, MCP_SPECIFICATION.md,
 README.md, ROADMAP.md: web-only clarifications and legacy notes\n-
 Program.cs: HTTP-first config already; minor cleanup\n- OverlayService.cs:
 remove internal MockOverlayWindow; use
 OverlayCompanion.UI.MockOverlayWindow\n- GetOverlayCapabilitiesTool:
 explicitly note web-only layering\n\nCo-authored-by: openhands
 <openhands@all-hands.dev>

---
 APPIMAGE_VALIDATION_FIXES.md                | 24 ++++--
 MCP_SPECIFICATION.md                        |  6 +-
 README.md                                   | 28 +++----
 ROADMAP.md                                  | 16 ++--
 SPECIFICATION.md                            |  8 +-
 docs/GEARLEVER_INTEGRATION.md               |  6 +-
 docs/GUI_THREADING_BEST_PRACTICES.md        |  4 +-
 docs/IMPLEMENTATION_GUIDE.md                |  9 ++-
 docs/SDK_INTEGRATION_SUMMARY.md             |  2 +-
 src/MCP/Tools/GetOverlayCapabilitiesTool.cs |  2 +-
 src/OverlayCompanion.csproj                 | 19 +++--
 src/Program.cs                              | 88 +++------------------
 src/Services/OverlayService.cs              | 64 +--------------
 13 files changed, 82 insertions(+), 194 deletions(-)

diff --git a/APPIMAGE_VALIDATION_FIXES.md b/APPIMAGE_VALIDATION_FIXES.md
index 2a46988..4f188fd 100644
--- a/APPIMAGE_VALIDATION_FIXES.md
+++ b/APPIMAGE_VALIDATION_FIXES.md
@@ -1,8 +1,10 @@
 # AppImage Validation and Error Detection Fixes

-## Problem Summary
+## Problem Summary (Legacy)

-The AppImage build was failing with GTK4 dependency errors, but GitHub Actions tests were still passing (green checkmark) due to inadequate error detection. This created a false sense of success while the AppImage was actually broken.
+Note: The project is now web-only. Native GTK/Avalonia desktop UI paths have been removed. The notes below are preserved for historical context in case AppImage packaging is reintroduced for a desktop build in the future.
+
+Previously, the AppImage build could fail with GTK4 dependency errors while GitHub Actions tests still passed (green checkmark) due to inadequate error detection. This created a false sense of success while the AppImage was actually broken.

 ### Original Errors

@@ -36,9 +38,9 @@ if ! xvfb-run -a timeout 30 ./app.AppImage --help > appimage_help_test.log 2>&1;
 fi
 ```

-### 2. Added GTK4 System Dependencies
+### 2. Added GTK4 System Dependencies (Historical)

-Added comprehensive GTK4 development packages to CI build:
+This section applied to the former desktop build. With web-only delivery, GTK4 is no longer required. If reintroducing a desktop build, install comprehensive GTK4 development packages in CI:
 ```yaml
 sudo apt-get install -y \
   libgtk-4-dev \
@@ -52,7 +54,7 @@ sudo apt-get install -y \
   libepoxy-dev
 ```

-### 3. Created Comprehensive Validation Script
+### 3. Created Comprehensive Validation Script (Applies to any AppImage)

 **New file: `scripts/validate-appimage.sh`**

@@ -77,7 +79,7 @@ Improved `scripts/build-appimage.sh` to provide better feedback:
 - Checks system GTK4 availability
 - Provides clear warnings when GTK4 isn't bundled

-### 5. Added Pre-commit Validation Hooks
+### 5. Added Pre-commit Validation Hooks (General)

 Enhanced `.pre-commit-config.yaml` with:
 - Build script executable permission checks
@@ -113,7 +115,7 @@ The updated workflow will now:

 ### After Fixes
 - ✅ Critical errors cause build failures
-- ✅ GTK4 libraries bundled in AppImage
+- ✅ GTK4 libraries bundled in AppImage (desktop build only)
 - ✅ Comprehensive validation with clear diagnostics
 - ✅ Pre-commit hooks catch issues early
 - ✅ Better error reporting and debugging info
@@ -140,4 +142,10 @@ The updated workflow will now:
 2. Validation logs provide detailed diagnostic information
 3. AppImage artifacts are only uploaded if validation passes

-This comprehensive approach ensures that AppImage builds are properly validated and critical errors are caught early in the development process.
\ No newline at end of file
+This comprehensive approach ensures that AppImage builds are properly validated and critical errors are caught early in the development process.
+## Current State
+
+- The application runs as a web-first MCP server with HTTP transport at root "/" and a browser overlay viewer served from wwwroot.
+- STDIO is retained only for legacy/testing.
+- Desktop GUI artifacts (GTK/Avalonia) are excluded from the build. Any future reintroduction should revisit this document.
+
diff --git a/MCP_SPECIFICATION.md b/MCP_SPECIFICATION.md
index ae2bfbb..79a1735 100644
--- a/MCP_SPECIFICATION.md
+++ b/MCP_SPECIFICATION.md
@@ -97,7 +97,7 @@ The server implements standard MCP error responses:
     "overlay_companion": {
       "url": "http://localhost:3000/",
       "description": "AI-assisted screen interaction with overlay functionality for multi-monitor setups",
-      "tags": ["screen-capture", "overlay", "automation", "multi-monitor", "gtk4", "linux"],
+      "tags": ["screen-capture", "overlay", "automation", "multi-monitor", "web", "http", "sse", "linux"],
       "provider": "Overlay Companion",
       "provider_url": "https://github.com/RyansOpenSauceRice/overlay-companion-mcp"
     }
@@ -122,7 +122,7 @@ These endpoints include proper metadata (description, tags, provider info) for b
     "overlay_companion": {
       "url": "http://localhost:3000/",
       "description": "AI-assisted screen interaction with overlay functionality for multi-monitor setups",
-      "tags": ["screen-capture", "overlay", "automation", "multi-monitor", "gtk4", "linux"],
+      "tags": ["screen-capture", "overlay", "automation", "multi-monitor", "web", "http", "sse", "linux"],
       "provider": "Overlay Companion",
       "provider_url": "https://github.com/RyansOpenSauceRice/overlay-companion-mcp"
     }
@@ -515,7 +515,7 @@ This repository uses **automated development environment setup** with:

 ### Build and Deployment

-**AppImage Build**: Automated AppImage creation with proper metadata validation
+**AppImage Build**: Legacy. Web-only delivery does not ship a desktop AppImage. This section is preserved for historical context if reintroduced.
 ```bash
 ./scripts/build-appimage.sh
 ```
diff --git a/README.md b/README.md
index b7e3628..1d83e56 100644
--- a/README.md
+++ b/README.md
@@ -1,7 +1,7 @@
 # overlay-companion-mcp

 [![MCP](https://img.shields.io/badge/MCP-Model%20Context%20Protocol-FF6B35?style=for-the-badge&logo=anthropic)](https://modelcontextprotocol.io/)
-[![Platform](https://img.shields.io/badge/platform-Linux%20AppImage-FCC624?style=for-the-badge&logo=linux)](https://appimage.org/)
+[![Platform](https://img.shields.io/badge/platform-Web%20(HTTP%20MCP)-00ADD8?style=for-the-badge&logo=google-chrome)](https://modelcontextprotocol.io/)
 [![Language](https://img.shields.io/badge/language-C%23-239120?style=for-the-badge&logo=csharp)](https://docs.microsoft.com/en-us/dotnet/csharp/)
 [![AI](https://img.shields.io/badge/AI-Cherry%20Studio%20Compatible-4285F4?style=for-the-badge&logo=openai)](https://cherry-studio.ai/)
 [![Automation](https://img.shields.io/badge/automation-Human%20in%20Loop-28A745?style=for-the-badge&logo=robot)](https://github.com/RyansOpenSauceRice/overlay-companion-mcp)
@@ -11,34 +11,34 @@

 A general-purpose, human-in-the-loop AI-assisted screen interaction toolkit built with the **official ModelContextProtocol C# SDK**.

-## Installation
+## Installation (Web-first)

-### Download AppImage (Recommended)
-1. Download the latest AppImage from [Releases](https://github.com/RyansOpenSauceRice/overlay-companion-mcp/releases)
-2. Make it executable: `chmod +x overlay-companion-mcp-*.AppImage`
-3. Run: `./overlay-companion-mcp-*.AppImage`
+Run as a headless HTTP MCP server that serves a browser overlay viewer.

-#### Automatic Updates
-The AppImage supports automatic updates via AppImageUpdate:
+### From source (recommended during development)
+```bash
+dotnet build -c Release src/OverlayCompanion.csproj -o build/publish
+./build/publish/overlay-companion-mcp
+```

-1. **Install AppImageUpdate**: `sudo apt install appimageupdate` or download from [AppImageUpdate releases](https://github.com/AppImage/AppImageUpdate/releases)
-2. **Check for updates**: `appimageupdate --check-for-update overlay-companion-mcp-*.AppImage`
-3. **Update automatically**: `appimageupdate overlay-companion-mcp-*.AppImage`
+Environment:
+- PORT or OC_PORT to change port (default 3000)
+- OC_SMOKE_TEST=1 to run smoke/startup check and exit



 **Architecture**: Full HTTP MCP server with web-only viewer. Overlays render in the browser and the server runs headless by default.
-- **Default operation**: HTTP server on port 3000 (HEADLESS=1)
+- **Default operation**: HTTP server on port 3000
 - **Native GUI**: Removed. All interaction is via the web UI and MCP over HTTP

 ### System Requirements
 - **Runtime**: .NET 8, Linux
-- **Web-first**: Browser overlay layer renders above a viewer (stub or Guacamole)
+- **Web-first**: Browser overlay renders via /ws/overlays events from server
 - **Recommended tools**: grim (Wayland), gnome-screenshot/spectacle; scrot/maim (X11 fallback)
 - **Clipboard**: wl-clipboard (wl-copy/wl-paste) recommended; xclip as X11 fallback

 ### Current Notes
-- **Transport**: HTTP is the primary transport. STDIO is deprecated and only retained for legacy testing.
+- **Transport**: HTTP is the primary transport at "/" with SSE. STDIO is deprecated and retained only for legacy/testing.
 - **GUI**: No native GUI. GTK/Avalonia paths have been removed; web-only experience.

 ## Usage
diff --git a/ROADMAP.md b/ROADMAP.md
index 20d0268..7a8619c 100644
--- a/ROADMAP.md
+++ b/ROADMAP.md
@@ -6,7 +6,7 @@
 - **MCP Protocol**: Full HTTP transport implementation (primary) with 13 working tools
 - **Transport Layer**: Native HTTP transport with image support, multi-client capability
 - **Legacy Support**: STDIO transport (deprecated) for backward compatibility
-- **Overlay System**: Complete with MockOverlayWindow for headless and AvaloniaOverlayWindow for GUI
+- **Overlay System**: Web-only viewer with MockOverlayWindow for server-side tracking; no native desktop GUI
 - **Screenshot Capture**: Working with Linux tools (scrot/gnome-screenshot)
 - **Input Simulation**: Click and type functionality implemented
 - **Mode Management**: 4 modes (passive, assist, autopilot, composing) with proper state management
@@ -60,11 +60,8 @@ MonitorIndex = 0, // TODO: Implement multi-monitor detection
 **Current**: 13/15 documented tools implemented

 ### 3. **HTTP Transport Enhancement** 🌐
-**Status**: Bridge implementation exists, needs proper HTTP transport
-**Impact**: Future-proofing and web integration
-
-**Current Implementation**: HTTP-to-STDIO bridge (functional but not optimal)
-**Needed**: Native HTTP transport using `ModelContextProtocol.AspNetCore`
+Status: Implemented (native HTTP transport via ModelContextProtocol.AspNetCore). Bridge removed.
+Impact: Future-proofing and web integration

 **Benefits of HTTP Transport**:
 - **Multi-client support**: Multiple MCP clients can connect simultaneously
@@ -160,10 +157,9 @@ app.MapMcp();  // Registers /mcp endpoint with streaming support
 4. **Overlay positioning**: Ensure overlays appear on correct monitor

 ### HTTP Transport Implementation:
-1. **Keep STDIO**: Maintain existing stdio transport (it's working perfectly)
-2. **Add HTTP**: Implement native HTTP using `ModelContextProtocol.AspNetCore`
-3. **Dual mode**: Support both transports simultaneously
-4. **Configuration**: Runtime selection via command-line flags
+1. Primary: Native HTTP using `ModelContextProtocol.AspNetCore` at root `/` with SSE
+2. Legacy: Optional STDIO (`--stdio`) for testing/compat; not recommended
+3. Web UI served at `/`; config endpoints at `/setup`, `/config`

 ### Missing Tools Implementation:
 1. **`get_display_info`**: Return monitor configuration, resolutions, scaling
diff --git a/SPECIFICATION.md b/SPECIFICATION.md
index f883239..83192c7 100644
--- a/SPECIFICATION.md
+++ b/SPECIFICATION.md
@@ -23,8 +23,8 @@ Cherry Studio → HTTP → MCP Server (OverlayCompanion)
 - **Use Case**: Modern integration, multi-client support, image handling
 - **Security**: Network-level isolation, CORS support
 - **Features**: Server-Sent Events streaming, concurrent clients, web integration
-- **Architecture**: HTTP server + GUI interface (GUI can be disabled for testing with `--no-gui`)
-- **Command**: `dotnet run` (default) or `./overlay-companion-mcp.AppImage`
+- **Architecture**: HTTP server with web-only overlay viewer (served from wwwroot). No native desktop GUI.
+- **Command**: `dotnet run` (default) or `./overlay-companion-mcp`

 #### 2. Legacy STDIO Transport (Deprecated)

@@ -35,7 +35,7 @@ Cherry Studio → stdio → MCP Server (OverlayCompanion)
 - **Use Case**: Legacy compatibility only
 - **Limitations**: No image support, single client, deprecated
 - **Security**: Process-level isolation
-- **Command**: `dotnet run --stdio` or `./overlay-companion-mcp.AppImage --stdio`
+- **Command**: `dotnet run --stdio` or `./overlay-companion-mcp --stdio`

 ### HTTP Transport Benefits

@@ -681,7 +681,7 @@ To keep the repository clean and reproducible, packaging outputs are generated a
   - AppStream file path: AppDir/usr/share/metainfo/overlay-companion-mcp.appdata.xml
   - Source of truth: Variables and heredoc content inside scripts/build-appimage.sh (APP_NAME, APP_DISPLAY_NAME, APP_DESCRIPTION, APP_CATEGORY, versioning, etc.).
 - If you need to edit metadata, update scripts/build-appimage.sh. Optionally, introduce checked-in templates (e.g., packaging/linux/overlay-companion-mcp.desktop.tmpl and packaging/linux/overlay-companion-mcp.appdata.xml.tmpl) and have the script copy them into AppDir at build time.
-- Trimming: Disabled by default in src/OverlayCompanion.csproj for stability with Avalonia/reflection. Do not pass /p:PublishTrimmed or TrimMode in workflows or scripts unless you explicitly re-enable trimming in the project.
+- Trimming: Disabled by default in src/OverlayCompanion.csproj for stability. Do not pass /p:PublishTrimmed or TrimMode in workflows or scripts unless you explicitly re-enable trimming in the project.
 - AppImage build notes:
   - The script auto-detects dotnet or installs SDK 8 locally via dotnet-install.sh if missing.
   - FUSE-less environments are supported via the extraction-based fallback.
diff --git a/docs/GEARLEVER_INTEGRATION.md b/docs/GEARLEVER_INTEGRATION.md
index bd987ea..0f177cd 100644
--- a/docs/GEARLEVER_INTEGRATION.md
+++ b/docs/GEARLEVER_INTEGRATION.md
@@ -1,8 +1,10 @@
-# GearLever Integration (Future Enhancement)
+# GearLever Integration (Legacy - Desktop AppImage)

 ## Overview

-[GearLever](https://mijorus.it/posts/gearlever/update-url-info/) is an AppImage manager that provides automatic update capabilities. This document outlines the planned integration to make Overlay Companion MCP compatible with GearLever's update system.
+Note: The project is now web-only and does not ship a desktop AppImage. This document is preserved for historical context in case a native desktop/AppImage distribution is reintroduced.
+
+[GearLever](https://mijorus.it/posts/gearlever/update-url-info/) is an AppImage manager that provides automatic update capabilities. This document outlines the planned integration to make a future Overlay Companion desktop AppImage compatible with GearLever's update system.

 ## Current Status

diff --git a/docs/GUI_THREADING_BEST_PRACTICES.md b/docs/GUI_THREADING_BEST_PRACTICES.md
index d47d319..4cba16a 100644
--- a/docs/GUI_THREADING_BEST_PRACTICES.md
+++ b/docs/GUI_THREADING_BEST_PRACTICES.md
@@ -1,4 +1,6 @@
-# GUI Threading Best Practices
+# GUI Threading Best Practices (Legacy Desktop)
+
+Note: The project is now web-only. This document is preserved for historical context and applies only to the former GTK/Avalonia desktop UI paths.

 This document outlines the threading best practices implemented in the Overlay Companion MCP to prevent GUI freezing and ensure responsive user interfaces.

diff --git a/docs/IMPLEMENTATION_GUIDE.md b/docs/IMPLEMENTATION_GUIDE.md
index a0eea55..6deec61 100644
--- a/docs/IMPLEMENTATION_GUIDE.md
+++ b/docs/IMPLEMENTATION_GUIDE.md
@@ -5,10 +5,11 @@
 ### Core Framework
 - **.NET 8.0** - Latest LTS version for cross-platform support
 - **C# 12** - Modern language features and performance
-- **Avalonia UI** - Cross-platform UI framework for overlay windows
+- **Web-only Viewer** - Static wwwroot served by ASP.NET Core; overlays rendered in browser via WebSocket events

 ### MCP Integration
 - **ModelContextProtocol SDK** - Official Microsoft/Anthropic MCP C# SDK
+- **ASP.NET Core** - Native HTTP transport with SSE at root "/"
 - **Microsoft.Extensions.Hosting** - .NET hosting and dependency injection
 - **Microsoft.Extensions.DependencyInjection** - Service container
 - **Cherry Studio Client** - AI model integration via MCP protocol
@@ -70,9 +71,9 @@ overlay-companion-mcp/
    - Privacy scrubbing

 2. **Overlay System**
-   - Transparent window management
-   - Multi-monitor positioning
-   - DPI awareness
+   - Browser-rendered overlays via WebSocket hub at `/ws/overlays`
+   - Server tracks state using MockOverlayWindow only
+   - Multi-monitor positioning (mapping logic; rendering handled in web viewer)
    - Temporary overlays

 ### Phase 3: Input Simulation
diff --git a/docs/SDK_INTEGRATION_SUMMARY.md b/docs/SDK_INTEGRATION_SUMMARY.md
index 7a95c2c..8479568 100644
--- a/docs/SDK_INTEGRATION_SUMMARY.md
+++ b/docs/SDK_INTEGRATION_SUMMARY.md
@@ -124,7 +124,7 @@ Cherry Studio → ModelContextProtocol SDK → McpServerBuilder → Tool Registr
 - Implement batch operations

 ### 2. **UI Framework Integration**
-- Replace MockOverlayWindow with Avalonia implementation
+- Maintain MockOverlayWindow for server-side state tracking; the browser renders overlays via WebSocket events
 - Port visual design from extracted components
 - Add multi-monitor overlay positioning

diff --git a/src/MCP/Tools/GetOverlayCapabilitiesTool.cs b/src/MCP/Tools/GetOverlayCapabilitiesTool.cs
index 7f1284d..2a1527f 100644
--- a/src/MCP/Tools/GetOverlayCapabilitiesTool.cs
+++ b/src/MCP/Tools/GetOverlayCapabilitiesTool.cs
@@ -21,7 +21,7 @@ public static class GetOverlayCapabilitiesTool
             supports_opacity = true,
             opacity_range = new { min = 0.0, max = 1.0, default_value = 0.5 },
             color_formats = new[] { "#RRGGBB", "#RRGGBBAA", "#RGB", "0xRRGGBB", "named (fallback)" },
-            layering = new { uses_layer_shell = OverlayCompanion.UI.LayerShellInterop.IsAvailable, notes = "overlay layer with anchors and keyboard=NONE when available; fallback to fullscreen toplevel" },
+            layering = new { uses_layer_shell = false, notes = "web-only viewer; native desktop layer-shell is disabled in this build" },
             coordinates = new { origin = "global", monitor_relative_under_layer_shell = true, tool_inputs = "tools accept monitor-relative coords; auto-adjust to global when not using layer-shell" }
         };
             // Coordinate system notes: global coords everywhere; when layer-shell is active the window is per-monitor and drawing
diff --git a/src/OverlayCompanion.csproj b/src/OverlayCompanion.csproj
index ac5c0dc..596440c 100644
--- a/src/OverlayCompanion.csproj
+++ b/src/OverlayCompanion.csproj
@@ -26,13 +26,7 @@
     <PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.0" />
     <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.0" />

-    <!-- GTK4 UI for overlay windows and GUI with true click-through support -->
-    <PackageReference Include="GirCore.Gtk-4.0" Version="0.6.3" />
-    <PackageReference Include="GirCore.Cairo-1.0" Version="0.6.3" />
-    <PackageReference Include="GirCore.Gdk-4.0" Version="0.6.3" />
-    <PackageReference Include="GirCore.Gio-2.0" Version="0.6.3" />
-    <PackageReference Include="GirCore.GLib-2.0" Version="0.6.3" />
-    <PackageReference Include="GirCore.GObject-2.0" Version="0.6.3" />
+    <!-- Web-only build: GTK4 desktop UI removed -->

     <!-- System libraries (updated for security) -->
     <PackageReference Include="System.Text.Json" Version="9.0.0" />
@@ -47,8 +41,19 @@
     <EmbeddedResource Remove="UI\avalonia-backup\**" />
     <None Remove="UI\avalonia-backup\**" />
     <Compile Remove="UI\Gtk4Stubs.cs" />
+    <Compile Remove="UI\Gtk4*.cs" />
+    <Compile Remove="UI\LayerShellInterop.cs" />
   </ItemGroup>

+  <!-- Ensure static web assets (wwwroot) are published -->
+  <ItemGroup>
+    <Content Include="wwwroot/**">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
+    </Content>
+  </ItemGroup>
+
+


 </Project>
diff --git a/src/Program.cs b/src/Program.cs
index 7da9e9e..0d2e66e 100644
--- a/src/Program.cs
+++ b/src/Program.cs
@@ -7,7 +7,7 @@ using Microsoft.AspNetCore.Hosting;
 using ModelContextProtocol.Server;
 using OverlayCompanion.Services;
 using OverlayCompanion.MCP.Tools;
-using OverlayCompanion.UI;
+
 using System.Diagnostics.CodeAnalysis;
 using System.Text.Json;
 using System.IO;
@@ -20,8 +20,7 @@ namespace OverlayCompanion;
 /// </summary>
 public class Program
 {
-    private static bool _gtk4Initialized = false;
-    private static readonly object _gtk4Lock = new object();
+    // Web-only: desktop GUI removed
     [RequiresUnreferencedCode("MCP server uses reflection-based tool discovery and JSON serialization; trimming may remove required members.")]
     public static async Task Main(string[] args)
     {
@@ -83,25 +82,9 @@ public class Program

         try
         {
-            // Start MCP host and (optionally) Avalonia GUI concurrently
-            bool smoke = args.Contains("--smoke-test") || Environment.GetEnvironmentVariable("OC_SMOKE_TEST") == "1";
-            bool headless = smoke || args.Contains("--no-gui") || Environment.GetEnvironmentVariable("HEADLESS") == "1";
+            // Web-only: no desktop GUI; just run host
             var hostTask = host.RunAsync();
-            Task? gtk4Task = null;
-            if (!headless)
-            {
-                gtk4Task = Task.Run(() => StartGtk4App(host.Services));
-            }
-
-            // Wait appropriately: if GUI started, tie process lifetime to GUI
-            if (gtk4Task is not null)
-            {
-                await gtk4Task;
-            }
-            else
-            {
-                await hostTask;
-            }
+            await hostTask;
         }
         catch (Exception ex)
         {
@@ -207,18 +190,12 @@ public class Program

         try
         {
-            // Start HTTP transport and (optionally) GTK4 GUI concurrently
+            // Web-only: no desktop GUI; just run web app
             bool smoke = args.Contains("--smoke-test") || Environment.GetEnvironmentVariable("OC_SMOKE_TEST") == "1";
-            bool headless = smoke || args.Contains("--no-gui") || Environment.GetEnvironmentVariable("HEADLESS") == "1";
             var webAppTask = app.RunAsync();
-            Task? gtk4Task = null;
-            if (!headless)
-            {
-                gtk4Task = Task.Run(() => StartGtk4App(app.Services));
-            }

             // In smoke test mode, create ready file after HTTP server starts and exit after delay
-            if (smoke && headless)
+            if (smoke)
             {
                 // Wait a moment for HTTP server to fully start
                 await Task.Delay(2000);
@@ -246,14 +223,7 @@ public class Program
                 return;
             }

-            if (gtk4Task is not null)
-            {
-                await gtk4Task;
-            }
-            else
-            {
-                await webAppTask;
-            }
+            await webAppTask;
         }
         catch (Exception ex)
         {
@@ -262,7 +232,7 @@ public class Program
         }
     }

-    // Smoke-test hooks: when SMOKE_TEST is enabled, start GUI and write a ready file when window shows
+    // Smoke-test hooks: write readiness file if requested (web-only)
     private static void ConfigureSmokeTestHooks()
     {
         var readyFile = Environment.GetEnvironmentVariable("OC_WINDOW_READY_FILE");
@@ -274,48 +244,12 @@ public class Program
         }
         catch { /* best-effort */ }

-        Gtk4OverlayApplication.WindowShown += () =>
-        {
-            try
-            {
-                File.WriteAllText(readyFile!, DateTime.UtcNow.ToString("o"));
-            }
-            catch { /* ignore */ }
-        };
+        try { File.WriteAllText(readyFile!, DateTime.UtcNow.ToString("o")); } catch { }
     }


-    private static void StartGtk4App(IServiceProvider services)
-    {
-        lock (_gtk4Lock)
-        {
-            if (_gtk4Initialized)
-            {
-                Console.WriteLine("WARNING: GTK4 already initialized, skipping duplicate initialization.");
-                return;
-            }
-            _gtk4Initialized = true;
-
-            try
-            {
-                // Initialize GTK4 application manager
-                Gtk4ApplicationManager.Initialize();
-
-                // Set service provider for dependency injection
-                Gtk4ApplicationManager.SetServiceProvider(services);
-
-                // Run the GTK4 application
-                Gtk4ApplicationManager.RunApplication(Array.Empty<string>());
-            }
-            catch (Exception ex)
-            {
-                Console.WriteLine($"ERROR: Failed to start GTK4 application: {ex.Message}");
-                Console.WriteLine($"Stack trace: {ex.StackTrace}");
-                _gtk4Initialized = false; // Reset flag on failure
-                throw;
-            }
-        }
-    }
+    // Web-only: StartGtk4App removed
+

     /// <summary>
     /// Get MCP configuration for HTTP transport (recommended)
diff --git a/src/Services/OverlayService.cs b/src/Services/OverlayService.cs
index 2cd2d78..cd56f83 100644
--- a/src/Services/OverlayService.cs
+++ b/src/Services/OverlayService.cs
@@ -170,19 +170,8 @@ public class OverlayService : IOverlayService

     private IOverlayWindow CreateOverlayWindow(OverlayElement overlay)
     {
-        // Check if running in headless mode
-        bool headless = Environment.GetEnvironmentVariable("HEADLESS") == "1";
-
-        if (headless)
-        {
-            // Use mock overlay window for headless mode
-            return new MockOverlayWindow(overlay);
-        }
-        else
-        {
-            // Use GTK4 overlay windows with true click-through support
-            return new Gtk4OverlayWindow(overlay);
-        }
+        // Web-only build: always use mock overlay window (rendering handled in browser via WebSocket events)
+        return new MockOverlayWindow(overlay);
     }
 }

@@ -197,52 +186,3 @@ public interface IOverlayWindow : IDisposable
     Task UpdatePositionAsync(ScreenRegion bounds);
     Task UpdateAppearanceAsync(string color, string? label);
 }
-
-/// <summary>
-/// Mock overlay window for testing
-/// Real implementation would use Avalonia, WPF, or other UI framework
-/// </summary>
-internal class MockOverlayWindow : IOverlayWindow
-{
-    private readonly OverlayElement _overlay;
-    private bool _isVisible;
-
-    public MockOverlayWindow(OverlayElement overlay)
-    {
-        _overlay = overlay;
-    }
-
-    public async Task ShowAsync()
-    {
-        _isVisible = true;
-        // TODO: Implement actual window creation and display
-        await Task.CompletedTask;
-    }
-
-    public async Task HideAsync()
-    {
-        _isVisible = false;
-        // TODO: Implement actual window hiding
-        await Task.CompletedTask;
-    }
-
-    public async Task UpdatePositionAsync(ScreenRegion bounds)
-    {
-        _overlay.Bounds = bounds;
-        // TODO: Implement actual position update
-        await Task.CompletedTask;
-    }
-
-    public async Task UpdateAppearanceAsync(string color, string? label)
-    {
-        _overlay.Color = color;
-        _overlay.Label = label;
-        // TODO: Implement actual appearance update
-        await Task.CompletedTask;
-    }
-
-    public void Dispose()
-    {
-        // TODO: Implement actual cleanup
-    }
-}
--
2.39.5
